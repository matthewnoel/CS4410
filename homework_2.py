# -*- coding: utf-8 -*-
"""Homework 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NvfPv078Q68jHZkeUe30gPI_lT2djgBU
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn import metrics
from sklearn.datasets import load_diabetes
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import ElasticNet, Lasso, Ridge
from sklearn.model_selection import KFold, cross_val_score

pd.set_option('precision', 4)
sns.set_style('whitegrid')

diabetes = load_diabetes()
print('Desc')
print(diabetes.DESCR)
print('Data shape')
print(diabetes.data.shape)
print('Target shape')
print(diabetes.target.shape)
print('Feature names')
print(diabetes.feature_names)

target_column_name = 'OneYearProgression'
diabetes_df = pd.DataFrame(diabetes.data, columns=diabetes.feature_names)
diabetes_df[target_column_name] = pd.Series(diabetes.target)
print('Dataframe desc')
print(diabetes_df.describe())
print('Dataframe head')
print(diabetes_df.head())

sample_df = diabetes_df.sample(frac=0.1, random_state=17)
print('Sampling graphs')
for feature in diabetes.feature_names:
    plt.figure(figsize=(8, 4.5))  # 8"-by-4.5" Figure
    sns.scatterplot(data=sample_df, x=feature, 
                    y=target_column_name, hue=target_column_name, 
                    palette='cool', legend=False)

X_train, X_test, Y_train, Y_test = train_test_split(diabetes.data, diabetes.target, random_state=11)
linear_regression = LinearRegression()
linear_regression.fit(X=X_train, y=Y_train)
LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)
for i, name in enumerate(diabetes.feature_names):
    print(f'{name:>10}: {linear_regression.coef_[i]}')
linear_regression.intercept_

predicted = linear_regression.predict(X_test)
expected = Y_test
test_df = pd.DataFrame()
test_df['Expected'] = pd.Series(expected)
test_df['Predicted'] = pd.Series(predicted)
figure = plt.figure(figsize=(9, 9))
axes = sns.scatterplot(data=test_df, x='Expected', y='Predicted', hue='Predicted', palette='cool', legend=False)
start = min(expected.min(), predicted.min())
end = max(expected.max(), predicted.max())
axes.set_xlim(start, end)
axes.set_ylim(start, end)
line = plt.plot([start, end], [start, end], 'k--')

print(metrics.r2_score(expected, predicted))
estimators = {
    'LinearRegression': linear_regression,
    'ElasticNet': ElasticNet(),
    'Lasso': Lasso(),
    'Ridge': Ridge()
}
for estimator_name, estimator_object in estimators.items():
    kfold = KFold(n_splits=10, random_state=11, shuffle=True)
    scores = cross_val_score(estimator=estimator_object, X=diabetes.data, y=diabetes.target, cv=kfold, scoring='r2')
    print(f'{estimator_name:>16}: ' + 
          f'mean of r2 scores={scores.mean():.3f}')